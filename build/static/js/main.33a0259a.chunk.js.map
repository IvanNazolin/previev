{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","word_list","split","reverse","Heart","props","useThree","camera","gl","x","useSpring","from","to","config","mass","tension","friction","delay","onRest","setAnimationFinished","group","useRef","heart","useLoader","GLTFLoader","nodes","materials","console","log","useEffect","current","scale","y","z","rotation","Math","PI","useFrame","clock","sin","elapsedTime","animationFinished","position","get","ref","dispose","visible","geometry","attach","color","roughness","metalness","LoveText","fontSize","children","maxWidth","lineHeight","textAlign","textref","React","Text","font","side","THREE","MyLight","lightRef","angle","intensity","castShadow","shadowMapWidth","shadowMapHeight","Word","useState","hovered","setHovered","document","body","style","cursor","quaternion","copy","material","lerp","set","onPointerOver","e","stopPropagation","onPointerOut","onPointerDown","index","Swal","fire","letterSpacing","Cloud","count","radius","useMemo","temp","spherical","phiSpan","thetaSpan","i","j","push","setFromSpherical","map","pos","word","App","canvasRef","fov","near","far","height","shadows","onCreated","scene","background","Stars","OrbitControls","enabled","maxPolarAngle","minPolarAngle","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yTAaAA,cAIA,IAGMC,EADe,qEACUC,MAAM,KAAKC,UAuG1C,SAASC,EAAMC,GACb,MAAuBC,cAAXC,GAAZ,EAAQC,GAAR,EAAYD,QAIJE,EAAMC,oBAAU,CACtBC,KAAM,CAAEF,EAAG,KACXG,GAAI,CAAEH,EAAG,IACTI,OAAQ,CACNC,KAAM,IACNC,QAAS,IACTC,SAAU,KAEZC,MAAO,IACPC,OAAQ,kBAAMb,EAAMc,sBAAqB,MATnCV,EAYFW,EAAQC,mBACRC,EAAQD,mBACd,EAA6BE,YAAUC,IAAY,oBAA3CC,EAAR,EAAQA,MAAR,EAAeC,UA2Bf,OA1BAC,QAAQC,IAAIH,GAEZI,qBAAU,WACRP,EAAMQ,QAAQC,MAAMtB,EAAI,GACxBa,EAAMQ,QAAQC,MAAMC,EAAI,GACxBV,EAAMQ,QAAQC,MAAME,EAAI,GAExBb,EAAMU,QAAQI,SAASF,EAAI,EAC3BZ,EAAMU,QAAQI,SAASD,EAAI,EAC3Bb,EAAMU,QAAQI,SAASzB,GAAK0B,KAAKC,GAAG,KAGtCC,aAAS,YAAc,IAAZC,EAAW,EAAXA,MACHP,EAAQ,EAAsC,IAAlCI,KAAKI,IAAsB,IAAlBD,EAAME,aAEjClB,EAAMQ,QAAQI,SAASD,GAAK,KAC5BX,EAAMQ,QAAQC,MAAMC,EAAID,EACxBT,EAAMQ,QAAQC,MAAMtB,EAAIsB,EACxBT,EAAMQ,QAAQC,MAAME,EAAIF,EAEpB1B,EAAMoC,oBACRlC,EAAOmC,SAASjC,EAAIA,EAAEkC,UAMxB,gDAAOC,IAAKxB,GAAWf,GAAvB,IAA8BwC,QAAS,KAAMd,MAAO,GAApD,UACE,sBAAMe,SAAO,EAACC,SAAUtB,EAAMrB,MAAM2C,SAAUH,IAAKtB,EAAOS,MAAO,GAAjE,SACE,sCACEiB,OAAO,WACPC,MAAM,MACNC,UAAW,GACXC,UAAW,OAGf,cAACC,EAAD,CAAUlB,SAAU,EAAEC,KAAKC,GAAG,EAAGhB,EAAMU,QAAUV,EAAMU,QAAQI,SAASD,EAAI,GAAIE,KAAKC,IAAKM,SAAU,CAAC,EAAG,EAAG,IAAKW,SAAU,EAA1H,uCA2BN,SAASD,EAAT,GAAgG,IAA5ElB,EAA2E,EAA3EA,SAAUoB,EAAiE,EAAjEA,SAAUD,EAAuD,EAAvDA,SAAUE,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,UAAWf,EAAY,EAAZA,SAC3EgB,EAAUrC,mBAERd,EAAWD,cAAXC,OAgBR,OAfAoB,QAAQC,IAAIrB,EAAO2B,SAASF,GAC5B2B,IAAM9B,WAAU,WACd6B,EAAQ5B,QAAQI,SAASzB,EAAIyB,EAAS,GACtCwB,EAAQ5B,QAAQI,SAASF,EAAIE,EAAS,GACtCwB,EAAQ5B,QAAQI,SAASD,EAAIC,EAAS,GAEtCwB,EAAQ5B,QAAQY,SAASjC,EAAIiC,EAAS,GACtCgB,EAAQ5B,QAAQY,SAASV,EAAIU,EAAS,GACtCgB,EAAQ5B,QAAQY,SAAST,EAAIS,EAAS,MAGxCL,aAAS,YAAe,IAAb9B,EAAY,EAAZA,OACTmD,EAAQ5B,QAAQI,SAASF,IAAMzB,EAAO2B,SAASD,EAAEE,KAAKC,OAItD,eAACwB,EAAA,EAAD,CAAMhB,IAAKc,EAASL,SAAUA,GAAYA,EAAUE,SAAUA,GAAYA,EAAUC,WAAYA,GAA0B,EAAGC,UAAWA,GAAwB,OAAQI,KAAK,aAA7K,UACGP,EACD,mCACEN,OAAO,WACPc,KAAMC,aACNd,MAAM,WAgBd,SAASe,IACP,IAAMC,EAAW5C,mBAGjB,OACE,4BAAYqB,SAAU,CAAC,GAAI,GAAI,IAAKwB,MAAO,GAAKC,UAAW,GACvDC,YAAU,EACVC,eAAgB,KAChBC,gBAAiB,KACjB1B,IAAKqB,IAMb,SAASM,EAAT,GAAuC,IAAvBjB,EAAsB,EAAtBA,SAAajD,EAAS,iBAC9B4C,EAAQ,IAAIc,QAEZnB,EAAMvB,mBACZ,EAA8BmD,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAsBA,OAlBA7C,qBAAU,WAER,OADI4C,IAASE,SAASC,KAAKC,MAAMC,OAAS,WACnC,kBAAOH,SAASC,KAAKC,MAAMC,OAAS,UAC1C,CAACL,IAEJpC,aAAS,YAAiB,IAAd9B,EAAa,EAAbA,OAEVqC,EAAId,QAAQiD,WAAWC,KAAKzE,EAAOwE,YAEnCnC,EAAId,QAAQmD,SAAShC,MAAMiC,KAAKjC,EAAMkC,IAAIV,EAAU,UAAY,WAAY,OASvE,cAACb,EAAA,EAAD,qCAAMhB,IAAKA,EAAKwC,cArBV,SAACC,GAAD,OAAQA,EAAEC,kBAAmBZ,GAAW,IAqBTa,aApBhC,kBAAMb,GAAW,IAoBkCc,cAN/D,WACe,SAAVlC,GAAmC,KAAdjD,EAAMoF,OAC5BC,IAAKC,KAAK,wCAAV,UA3Qc,gNA2QyB,aAIoDtF,GAxB7E,CAAEwD,KAAM,aAAcR,SAAU,IAAKuC,eAAgB,IAAMpC,WAAY,EAAG,uBAAuB,IAwB5G,IAA8GF,SAAUA,KAGjI,SAASuC,EAAT,GAA6C,IAAD,IAA3BC,aAA2B,MAAnB,GAAmB,MAAfC,cAAe,MAAN,GAAM,EAY1C,OAVcC,mBAAQ,WAKpB,IAJA,IAAMC,EAAO,GACPC,EAAY,IAAInC,YAChBoC,EAAUhE,KAAKC,IAAM0D,EAAQ,GAC7BM,EAAuB,EAAVjE,KAAKC,GAAU0D,EACzBO,EAAI,EAAGA,EAAIP,EAAQ,EAAGO,IAE7B,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAOQ,IAAKL,EAAKM,KAAK,EAAC,IAAIxC,WAAgByC,iBAAiBN,EAAUf,IAAIY,EAAQI,EAAUE,EAAGD,EAAYE,IAAKrG,EAAUqG,KAChJ,OAAOL,IACN,CAACH,EAAOC,IACEU,KAAI,WAAchB,GAAd,uBAAEiB,EAAF,KAAOC,EAAP,YAAwB,cAACpC,EAAD,CAAkB7B,SAAUgE,EAAKpD,SAAUqD,EAAMlB,MAAOA,GAA7CA,MA2FvCmB,MAxCf,WACE,IAAMC,EAAYxF,mBAElB,EAAkDmD,oBAAS,GAA3D,mBAAO/B,EAAP,KAA0BtB,EAA1B,KAGA,OACE,eAAC,IAAD,CAAQyB,IAAKiE,EAAWtG,OAAQ,CAAEuG,IAAK,GAAIC,KAAM,GAAKC,IAAK,IAAMtE,SAAU,CAAC,EAAG,EAAG,IAAMmC,MAAO,CAAEoC,OAAQ,SACvGC,SAAO,EAEPC,UAAW,YAAmB,EAAhB3G,GAAgB,EAAZ4G,MAEVC,WAAa,IAAItD,QAAY,YALvC,UAQE,cAACuD,EAAA,EAAD,IAGE,cAACtD,EAAD,IACA,8BAAcG,UAAW,KAI3B,cAACoD,EAAA,EAAD,CAAeC,QAAS/E,EAAmBgF,cAAetF,KAAKC,GAAG,EAAGsF,cAAevF,KAAKC,GAAG,IAE5F,cAAC,WAAD,CAAUuF,SAAU,KAApB,SAA0B,cAACvH,EAAD,CAAOe,qBAAsBA,EAAsBsB,kBAAmBA,MAShG,cAACoD,EAAD,CAAOC,MAAO,GAAIC,OAAQ,SCxXjB6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5D,SAAS6D,eAAe,SAM1BZ,M","file":"static/js/main.33a0259a.chunk.js","sourcesContent":["import Swal from 'sweetalert2'\n\nimport { Stars, Sky, OrbitControls, Billboard, Text, Html, Plane, Sphere, softShadows } from \"@react-three/drei\"\nimport React, { useRef, Suspense, useEffect, useMemo, useState } from \"react\"\nimport { Canvas, extend, useThree, useFrame, useLoader } from \"@react-three/fiber\"\nimport { GLTFLoader } from \"three-stdlib\";\n//import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport * as THREE from \"three\";\nimport { Physics, useBox, usePlane, useSphere } from \"use-cannon\"\nimport { MeshStandardMaterial, SphereBufferGeometry } from \"three\";\nimport { useGLTF, PerspectiveCamera } from '@react-three/drei'\nimport { useSpring } from \"react-spring\";\n//extend({ OrbitControls })\nsoftShadows()\n\n\n\nconst HINT_PHRASE = \"–ó–∞ –∫–æ–ª–æ–Ω–∫—É –ø–æ–¥–æ–π–¥–∏ –∏ –ø–æ–¥–∞—Ä–æ—á–µ–∫ –Ω–∞–π–¥–∏ üéÅ\"\n//14 words\nconst birthdayText = \"Happy birthday to you Ivan I wish you good luck in new school 1502\"\nconst word_list = birthdayText.split(\" \").reverse()\n\nfunction Box({position, scale}) {\n  //const [ref, api] = useBox(() => ({ mass: 1, position: [0, 10, 0], onCollide: (e)=>e.body.material.color.g = Math.random() }))\n  const star = useRef()\n  // function handleClick() {\n  //   console.log(api)\n  //   api.velocity.set(0, 5, 0)\n  // }\n  const vector = [10*Math.random(), 10*Math.random(), 10*Math.random()]\n\n  useFrame(({clock}) => {\n    star.current.position.x += vector[0]/100\n    star.current.position.y += vector[1]/100\n    star.current.position.z += vector[2]/100\n  })\n\n  return (\n    <>\n\n      <mesh ref={star} position={position} receiveShadow castShadow scale={scale}>\n        <boxBufferGeometry attach=\"geometry\" />\n        <meshStandardMaterial color=\"hotpink\" />\n      </mesh>\n    </>\n  )\n}\n\nconst CameraControls = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls class.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n\n  const {\n    camera,\n    gl: { domElement }\n  } = useThree();\n\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame(state => controls.current.update());\n  return (\n    <orbitControls\n      ref={controls}\n      args={[camera, domElement]}\n      enableZoom={true}\n    />\n  );\n};\n\nfunction BillBoard({ position }) {\n  return (\n    <Billboard\n      follow={true}\n      lockX={false}\n      lockY={false}\n      lockZ={false} // Lock the rotation on the z axis (default=false)\n      position={position}\n      children={\n        <LoveText rotation={[0, 0, 0]} fontSize={5} maxWidth={20} lineHeight={1} textAlign=\"center\">\n          My Baby!\n          My princess!\n          I love you so much ‚ù§\n        </LoveText>\n      }\n    />\n  )\n}\n\nfunction FallingStars({ count }) {\n  const positions = useMemo(() => {\n    let positions = []\n    for (let i = 0; i < count; i++) {\n      const r = 3600\n      const theta = 2 * Math.PI * Math.random()\n      const phi = Math.acos(2 * Math.random() - 1)\n      const x = r * Math.cos(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const y = r * Math.sin(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const z = r * Math.cos(phi) + (-1000 + Math.random() * 2000)\n      positions.push(x)\n      positions.push(y)\n      positions.push(z)\n    }\n    return new Float32Array(positions)\n  }, [count])\n\n  let group = useRef();\n\n  useFrame(() => (group.current.rotation.y -= 0.001))\n\n  return (\n    <group ref={group}>\n      <points>\n        <bufferGeometry attach=\"geometry\">\n          <bufferAttribute attachObject={['attributes', 'position']} count={positions.length / 3} array={positions} itemSize={3} />\n        </bufferGeometry>\n        <pointsMaterial attach=\"material\" size={12.5} sizeAttenuation color=\"red\" fog={false} />\n      </points>\n    </group>\n  )\n}\n\n\nfunction Heart(props) {\n  const { gl, camera } = useThree()\n  \n  //camera.position.x = 4000\n\n  const { x } = useSpring({\n    from: { x: 8000 },\n    to: { x: 10 },\n    config: {\n      mass: 1.5,\n      tension: 200,\n      friction: 140\n    },\n    delay: 3000,\n    onRest: () => props.setAnimationFinished(true)\n  });\n\n  const group = useRef()\n  const heart = useRef()\n  const { nodes, materials } = useLoader(GLTFLoader, \"models/heart.glb\");\n  console.log(nodes)\n\n  useEffect(()=>{\n    heart.current.scale.x = 0.1\n    heart.current.scale.y = 0.1\n    heart.current.scale.z = 0.1\n\n    group.current.rotation.y = 0\n    group.current.rotation.z = 0\n    group.current.rotation.x = -Math.PI/2\n  })\n\n  useFrame(({clock}) => {\n    const scale = 1 + Math.sin(clock.elapsedTime*1.5) * 0.05\n    //console.log(scale)\n    heart.current.rotation.z += 0.005\n    heart.current.scale.y = scale\n    heart.current.scale.x = scale\n    heart.current.scale.z = scale\n\n    if(!props.animationFinished){\n      camera.position.x = x.get()\n    }\n    \n  })\n\n  return (\n    <group ref={group} {...props} dispose={null} scale={0.1}>\n      <mesh visible geometry={nodes.Heart.geometry} ref={heart} scale={0.1}> \n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"red\"\n          roughness={0.3}\n          metalness={0.3}\n        />\n      </mesh>\n      <LoveText rotation={[-Math.PI/2, group.current ? group.current.rotation.z : 0, -Math.PI]} position={[0, 0, 25]} fontSize={7}>Happy Birthday, Ivan!</LoveText>\n    </group>\n  )\n}\n\n\nfunction MyPlane({ position, width, height, color }) {\n  const [ref] = usePlane(() => ({ position: [0, 0, 0], rotation: [-Math.PI / 2, 0, 0] }))\n\n  return (\n    <>\n    <mesh position={[position[0], position[1], position[2]]} rotation={[-Math.PI / 2, 0, 0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[width, height]} />\n      <shadowMaterial attach=\"material\" opacity={0.1}/>\n    </mesh>\n    <mesh position={[position[0], position[1], position[2]]} rotation={[-Math.PI / 2, 0, 0]} ref={ref} receiveShadow={true}>\n      <planeBufferGeometry attach=\"geometry\" args={[width, height]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        side={THREE.DoubleSide}\n        color=\"lightblue\"\n      />\n    </mesh>\n    </>\n  )\n}\n\nfunction LoveText({ rotation, children, fontSize, maxWidth, lineHeight, textAlign, position }) {\n  const textref = useRef()\n\n  const { camera } = useThree();\n  console.log(camera.rotation.y)\n  React.useEffect(() => {\n    textref.current.rotation.x = rotation[0]\n    textref.current.rotation.y = rotation[1]\n    textref.current.rotation.z = rotation[2]\n\n    textref.current.position.x = position[0]\n    textref.current.position.y = position[1]\n    textref.current.position.z = position[2]\n  })\n\n  useFrame(({camera}) => {\n    textref.current.rotation.y = -(camera.rotation.z+Math.PI)\n    //console.log(camera.rotation.z)\n  });\n  return (\n    <Text ref={textref} fontSize={fontSize && fontSize} maxWidth={maxWidth && maxWidth} lineHeight={lineHeight ? lineHeight : 1} textAlign={textAlign ? textAlign : \"left\"} font='/font.woff'>\n      {children}\n      <meshBasicMaterial\n        attach=\"material\"\n        side={THREE.DoubleSide}\n        color=\"red\"\n      />\n    </Text>\n  )\n}\n\nfunction Ball(){\n  const [ref, api] = useSphere(() => ({mass: 1, position: [1, 4, 1]}))\n  return(\n    <mesh ref={ref} castShadow position = {[1, 4, 1]}>\n      <SphereBufferGeometry attach=\"geometry\" />\n      <MeshStandardMaterial attach=\"material\" color=\"red\"/>\n    </mesh>\n  )\n}\n\nfunction MyLight(){\n  const lightRef = useRef()\n\n  \n  return(\n    <pointLight position={[10, 15, 10]} angle={0.3} intensity={0.5}\n        castShadow\n        shadowMapWidth={1024}\n        shadowMapHeight={1024}\n        ref={lightRef}\n        \n        />\n  )\n}\n\nfunction Word({ children, ...props }) {\n  const color = new THREE.Color()\n  const fontProps = { font: '/font.woff', fontSize: 3.5, letterSpacing: -0.05, lineHeight: 1, 'material-toneMapped': false }\n  const ref = useRef()\n  const [hovered, setHovered] = useState(false)\n  const over = (e) => (e.stopPropagation(), setHovered(true))\n  const out = () => setHovered(false)\n  // Change the mouse cursor on hover\n  useEffect(() => {\n    if (hovered) document.body.style.cursor = 'pointer'\n    return () => (document.body.style.cursor = 'auto')\n  }, [hovered])\n  // Tie component to the render-loop\n  useFrame(({ camera }) => {\n    // Make text face the camera\n    ref.current.quaternion.copy(camera.quaternion)\n    // Animate font color\n    ref.current.material.color.lerp(color.set(hovered ? '#fa2720' : '#0294f5'), 0.1)\n  })\n\n  function handleClick(){\n    if(children==\"Happy\" && props.index===97){\n      Swal.fire(\"–£—Ä–∞–∞–∞–∞!\", `${HINT_PHRASE}`, \"success\")\n    }\n  }\n\n  return <Text ref={ref} onPointerOver={over} onPointerOut={out} onPointerDown={handleClick} {...props} {...fontProps} children={children}/>\n}\n\nfunction Cloud({ count = 10, radius = 20 }) {\n  // Create a count x count random words with spherical distribution\n  const words = useMemo(() => {\n    const temp = []\n    const spherical = new THREE.Spherical()\n    const phiSpan = Math.PI / (count + 1)\n    const thetaSpan = (Math.PI * 2) / count\n    for (let i = 1; i < count + 1; i++)\n      // Taken from https://discourse.threejs.org/t/can-i-place-obects-on-a-sphere-surface-evenly/4773/6\n      for (let j = 0; j < count; j++) temp.push([new THREE.Vector3().setFromSpherical(spherical.set(radius, phiSpan * i, thetaSpan * j)), word_list[j]])\n    return temp\n  }, [count, radius])\n  return words.map(([pos, word], index) => <Word key={index} position={pos} children={word} index={index}/>)\n}\n\nconst AnimatedCamera = ({ animate }) => {\n  const [dollyFinished, setDollyFinished] = useState(false);\n  const controls = useRef();\n\n  const { y, x } = useSpring({\n    from: { y: 20, x: -20 },\n    to: animate ? { y: 0, x: -2 } : {},\n    config: {\n      mass: 1.5,\n      tension: 280,\n      friction: 140\n    },\n    onRest: () => setDollyFinished(true)\n  });\n\n  const { targetY } = useSpring({\n    from: { targetY: 20 },\n    to: animate ? { targetY: 0 } : {},\n    config: {\n      tension: 330,\n      friction: 70\n    }\n  });\n\n  useFrame(({ camera }) => {\n    if (!dollyFinished) {\n      controls.current.target.y = targetY.value;\n\n      if (camera.position.y > 0) {\n        camera.position.y = y.value;\n        camera.position.x = x.value;\n        controls.current.update();\n      }\n    }\n  });\n\n  return (\n    <>\n      <OrbitControls\n        enabled={true}\n        ref={controls}\n        target={[0, 20, 0]}\n      />\n      <PerspectiveCamera makeDefault position={[-20, 20, 4]} />;\n    </>\n  );\n};\n\nfunction App() {\n  const canvasRef = useRef()\n  const radius = 3600\n  const [animationFinished, setAnimationFinished] = useState(false)\n\n\n  return (\n    <Canvas ref={canvasRef} camera={{ fov: 75, near: 0.1, far: 8000, position: [9, 0, 5] }} style={{ height: \"100vh\" }}\n      shadows\n      \n      onCreated={({ gl, scene }) => {\n\n        scene.background = new THREE.Color('#000000')\n      }}>\n\n      <Stars />\n\n\n        <MyLight/>\n        <ambientLight intensity={0.3}/>\n      \n      \n\n      <OrbitControls enabled={animationFinished} maxPolarAngle={Math.PI/2} minPolarAngle={Math.PI/2}/>\n\n      <Suspense fallback={null}><Heart setAnimationFinished={setAnimationFinished} animationFinished={animationFinished}/></Suspense>\n      \n      {/* <Physics>\n        \n        <MyPlane position={[0, -1, 0]} width={10} height={10} color=\"lightblue\" />\n        \n      </Physics> */}\n\n      \n      <Cloud count={14} radius={40} /> \n\n    </Canvas>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}